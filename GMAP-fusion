#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use Getopt::Long qw(:config no_ignore_case bundling pass_through);
use FindBin;
use Cwd;
use lib ("$FindBin::Bin/PerlLib");
use __GLOBALS__;
use Pipeliner;
use Process_cmd;

## configuration:
my $GENOME = "${FUSION_ANNOTATOR_LIB}/Hg19.fa";
my $GMAP_DB_DIR = "${FUSION_ANNOTATOR_LIB}";
my $GMAP_DB_NAME = "Hg19.fa.gmap";

my $REF_GTF = "${FUSION_ANNOTATOR_LIB}/gencode.v19.annotation.gtf.exons.protein_coding";

## end of configuration

my $CPU = 4;
my $MIN_TRANS_LEN_TRY_CHIM = 30;
my $output_directory = "GMAP_Fusion";
my $MIN_NOVEL_J = 3;
my $MIN_J = 1;
my $MIN_SUM_JS = 2;


my $usage = <<__EOUSAGE__;

############################################################################################################
#
#  Required:
#
#  --transcripts|T <string>        :transcript fasta file
#
#  Optional:
#
#  --CPU <int>                     :number threads for GMAP (default $CPU)
#
#  --min_chim_len|L <int>            :minimum length for a chimeric alignment (default: $MIN_TRANS_LEN_TRY_CHIM)
#
#  --output|o <string>             :output directory name (default: $output_directory)
#
#  --left_fq <string>              :Illumina paired-end reads /1
#  --right_fq <string>             :Illumina paired-end reads /2
#   
#  # min JS apply only if --left_fq && --right_fq are specified.
#  --min_J|J <int>                 :minimum number of junction frags (default: $MIN_J)  
#  --min_sumJS|S <int>             :minimum sum (junction + spanning) frags (default: $MIN_SUM_JS)
#
#  --min_novel_junction_support <int>   :minimum number of junction reads required for novel (non-reference) exon-exon junction support.
#                                        (default: $MIN_NOVEL_J)
#
##############################################################################################################


__EOUSAGE__

    ;


my $help_flag;
my $transcripts_file;
my $max_ref_splice_dist = -1;
my $left_fq;
my $right_fq;

my $DEBUG = 0;

&GetOptions ( 'help|h' => \$help_flag,
              
              'transcripts|T=s' => \$transcripts_file,
              
              'output|o=s' => \$output_directory,

              'min_chim_len|L=i' => \$MIN_TRANS_LEN_TRY_CHIM,

              'max_ref_splice_dist|D=i' => \$max_ref_splice_dist,
              
              'DEBUG' => \$DEBUG,

              'CPU=i' => \$CPU,
             
              'left_fq=s' => \$left_fq,
              'right_fq=s' => \$right_fq,
 
              
);



if ($help_flag) {
    die $usage;
}

unless ($transcripts_file) {
    die $usage;
}


$transcripts_file = &ensure_full_path($transcripts_file);
if ($left_fq) {
    $left_fq = &ensure_full_path($left_fq);
}
if ($right_fq) {
    $right_fq = &ensure_full_path($right_fq);
}



if ($output_directory) {
    
    unless (-d $output_directory) {
        mkdir $output_directory or die "Error, cannot mkdir $output_directory";
    }
    chdir $output_directory or die "Error, cannot cd to $output_directory";
}


my $UTILDIR = "$FindBin::RealBin/util";


main: {


    my $pipeliner = new Pipeliner(-verbose => 2);

    ####################################################
    # run GMAP to identify potential fusion transcripts
    ####################################################

    my $gmap_output_file = "gmap.map.gff3";
    my $cmd = "gmap -D $GMAP_DB_DIR -d $GMAP_DB_NAME $transcripts_file -f 3 -n 0 -x $MIN_TRANS_LEN_TRY_CHIM -t $CPU  > $gmap_output_file ";
    
    $pipeliner->add_commands(new Command($cmd, ".${gmap_output_file}.ok"));

    ###############################
    ## generate initial chim report
    ###############################

    my $chims_described_outfile = "$gmap_output_file.chims_described";
    $cmd = "$UTILDIR/gmap_genome_gff3_to_chim_summary.pl --gmap_gff3 $gmap_output_file --annot_gtf $REF_GTF > $chims_described_outfile";
    
    $pipeliner->add_commands(new Command($cmd, ".${chims_described_outfile}.ok") );


    if ($left_fq && $right_fq) {
        
        #################################
        ## determine fusion read support
        ################################
        
        my $chims_described_plus_read_support = "$chims_described_outfile.w_read_support";
        
        $cmd = "$UTILDIR/estimate_fusion_read_support.pl $transcripts_file $chims_described_outfile $left_fq $right_fq > $chims_described_plus_read_support";
        $pipeliner->add_commands(new Command($cmd, ".${chims_described_plus_read_support}.ok"));

        $chims_described_outfile = $chims_described_plus_read_support;
    }
    
    
    #############################################################
    ## filter the chimeras based on distance from exon junctions:
    #############################################################

    my $chims_filt_outfile = "$chims_described_outfile.J${MIN_J}.JS${MIN_SUM_JS}.NJ${MIN_NOVEL_J}";
    $cmd = "$UTILDIR/filter_gmap_chims_via_dist_from_exon_bounds.pl $chims_described_outfile $MIN_J $MIN_SUM_JS $MIN_NOVEL_J > $chims_filt_outfile";
    
    $pipeliner->add_commands(new Command($cmd, ".${chims_filt_outfile}.ok") );

    ###############################################
    ## annotate the fusions, make a prettier report
    ###############################################
    
    my $annotation_report_file = "GMAP-Fusion.report.xls";
    $cmd = "$UTILDIR/write_GMAP_Fusion_annot_report.pl $chims_filt_outfile > $annotation_report_file";
    
    $pipeliner->add_commands(new Command($cmd, ".${annotation_report_file}.ok"));
    

    

    $pipeliner->run();
    
    exit(0); ### stopping here now.
    
}

